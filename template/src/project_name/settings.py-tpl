"""
Django settings for the mafiasi {{ project_name }} project.

Generally, runtime settings are taken from the environment in the following order of precedence
- From a .env file
- From a .env.local file
- From a .env.$mode file (e.g. .env.dev or .env.prod)
- From a .env.$mode.local file (e.g. .env.dev.local or .env.prod.local)
- From the process environment

For the database url, see https://github.com/jazzband/dj-database-url#url-schema
"""

from pathlib import Path

from environs import Env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


env = Env()
env.read_env(".env", override=True)
env.read_env(".env.local", override=True)
ENV_MODE = env.str("ENV_MODE", default="dev")
env.read_env(f".env.{ENV_MODE}", override=True)
env.read_env(f".env.{ENV_MODE}.local", override=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
# See https://docs.djangoproject.com/en/4.2/ref/settings/

SECRET_KEY = env.str("SECRET_KEY")
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")
DATABASES = {"default": env.dj_db_url("DB")}
CACHES = {"default": env.dj_cache_url("CACHE", default="locmem://default")}
DEBUG = env.bool("DEBUG", default=ENV_MODE == "dev")
CORS_ALLOWED_ORIGINS = env.list("ALLOWED_CORS_ORIGINS", default=[])

OPENID_CLIENT_ID = env.str("OPENID_CLIENT_ID")
OPENID_CLIENT_SECRET = env.str("OPENID_CLIENT_SECRET")
OPENID_ISSUER = "https://identity.mafiasi.de/realms/mafiasi"
OPENID_SCOPE = "openid"
OPENID_USER_MAPPER = "{{ project_name }}.core.oidc_user_mapping.UserMapper"
ANY_OPENID_USER_IS_ADMIN = env.bool("ANY_OPENID_USER_IS_ADMIN", default=ENV_MODE == "dev")
OPENID_SUPERUSER_GROUPS = env.list("OPENID_SUPERUSER_GROUPS", default=[])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "simple_openid_connect.integrations.django",
    "rest_framework",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "{{ project_name }}.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "{{ project_name }}.wsgi.application"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] {message}",
            "style": "{",
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT = BASE_DIR / "staticfiles"

STATIC_URL = "backend-static/"

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "{{ project_name }}_core.User"

LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "simple_openid_connect_django:login"

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "simple_openid_connect.integrations.djangorestframework.authentication.AccessTokenAuthentication",
    ],
}

SPECTACULAR_SETTINGS = {
    "TITLE": "{{ project_name }} API",
    "VERSION": "0.1.0",
    "LICENSE": {
        "name": "MIT",
    },
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_DIST": "SIDECAR",
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
    "COMPONENT_SPLIT_REQUEST": True,
    "AUTHENTICATION_WHITELIST": [
        "simple_openid_connect.integrations.djangorestframework.authentication.AccessTokenAuthentication",
    ],
}
